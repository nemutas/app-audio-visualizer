{"version":3,"sources":["components/App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","audioRef","useRef","canvasRef","analyserRef","animeIdRef","volumeRef","renderFrame","ctx","dataArray","WIDTH","canvas","width","HEIGHT","height","dataLength","length","barWidth","x","current","getByteFrequencyData","fillStyle","fillRect","i","barHeight","r","g","requestAnimationFrame","useEffect","cancelAnimationFrame","className","styles","container","ref","player","controls","loop","src","onPlay","audioContext","AudioContext","createMediaElementSource","analyser","createAnalyser","connect","destination","fftSize","volume","bufferLength","frequencyBinCount","Uint8Array","window","innerWidth","innerHeight","getContext","onVolumeChange","css","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gMASaA,EAAW,WACvB,IAAMC,EAAWC,iBAAyB,MACpCC,EAAYD,iBAA0B,MACtCE,EAAcF,mBACdG,EAAaH,mBACbI,EAAYJ,iBAAO,KAiCzB,SAASK,EAAYC,EAA+BC,GACnD,IAAMC,EAAQF,EAAIG,OAAOC,MACnBC,EAASL,EAAIG,OAAOG,OACpBC,EAAaN,EAAUO,OAEvBC,EAAWP,EAAQK,EACrBG,EAAI,EAERd,EAAYe,QAASC,qBAAqBX,GAE1CD,EAAIa,UAAY,UAChBb,EAAIc,SAAS,EAAG,EAAGZ,EAAOG,GAE1B,IAAK,IAAIU,EAAI,EAAGA,EAAIR,EAAYQ,IAAK,CACpC,IAAMC,EAAYf,EAAUc,GAEtBE,EAAID,EAAkBD,EAAIR,EAAV,GAChBW,EAAWH,EAAIR,EAAX,IAGVP,EAAIa,UAAY,OAASI,EAAI,IAAMC,EAAnB,OAChBlB,EAAIc,SAASJ,EAAGL,EAAS,EAAGI,GAAWO,GACvChB,EAAIc,SAASJ,EAAGL,EAAS,EAAGI,EAAUO,GAEtCN,GAAKD,EAAW,EAGjBZ,EAAWc,QAAUQ,uBAAsB,kBAAMpB,EAAYC,EAAKC,MAWnE,OARAmB,qBAAU,WACT,OAAO,WACFvB,EAAWc,SACdU,qBAAqBxB,EAAWc,YAGhC,IAGF,sBAAKW,UAAWC,EAAOC,UAAvB,UACC,wBAAQC,IAAK9B,EAAW2B,UAAWC,EAAOpB,SAC1C,uBACCsB,IAAKhC,EACL6B,UAAWC,EAAOG,OAClBC,UAAQ,EACRC,MAAI,EACJC,IAAI,0DACJC,OA3EiB,WACnB,IAAKlC,EAAYe,QAAS,CACzB,IAAMoB,EAAe,IAAIC,aACnBH,EAAME,EAAaE,yBAAyBxC,EAASkB,SACrDuB,EAAWH,EAAaI,iBAC9BN,EAAIO,QAAQF,GACZA,EAASE,QAAQL,EAAaM,aAC9BH,EAASI,QAAU,IACnB1C,EAAYe,QAAUuB,EAGvBzC,EAASkB,QAAS4B,OAASzC,EAAUa,QAErC,IAAM6B,EAAe5C,EAAYe,QAAS8B,kBACpCxC,EAAY,IAAIyC,WAAWF,GAEjC7C,EAAUgB,QAASP,MAAQuC,OAAOC,WAClCjD,EAAUgB,QAASL,OAASqC,OAAOE,YAGnC9C,EAFYJ,EAAUgB,QAASmC,WAAW,MAEzB7C,IAwDf8C,eAAgB,kBAAOjD,EAAUa,QAAUlB,EAASkB,QAAS4B,cAS3DhB,EAAS,CACdC,UAAWwB,YAAF,0KAQT7C,OAAQ6C,YAAF,mEAINtB,OAAQsB,YAAF,2ECvGQC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACR,cAAC,IAAMC,WAAP,UACC,cAAC,EAAD,MAEDC,SAASC,eAAe,SAMzBb,K","file":"static/js/main.8a6f5a53.chunk.js","sourcesContent":["// https://www.nti-audio.com/ja/%E3%82%B5%E3%83%9D%E3%83%BC%E3%83%88/%E6%B8%AC%E5%AE%9A%E3%83%8E%E3%82%A6%E3%83%8F%E3%82%A6/%E9%AB%98%E9%80%9F%E3%83%95%E3%83%BC%E3%83%AA%E3%82%A8%E5%A4%89%E6%8F%9B\n// https://developer.mozilla.org/ja/docs/Web/API/Web_Audio_API/Visualizations_with_Web_Audio_API\n// https://developer.mozilla.org/ja/docs/Web/HTML/Element/audio\n// https://codepen.io/nfj525/pen/rVBaab\n// https://natural-tearoom.com/video-rules/\n\nimport React, { useEffect, useRef, VFC } from 'react';\nimport { css } from '@emotion/css';\n\nexport const App: VFC = () => {\n\tconst audioRef = useRef<HTMLAudioElement>(null)\n\tconst canvasRef = useRef<HTMLCanvasElement>(null)\n\tconst analyserRef = useRef<AnalyserNode>()\n\tconst animeIdRef = useRef<number>()\n\tconst volumeRef = useRef(0.05)\n\n\t/**\n\t * 曲を再生させたとき\n\t */\n\tconst playHandler = () => {\n\t\tif (!analyserRef.current) {\n\t\t\tconst audioContext = new AudioContext()\n\t\t\tconst src = audioContext.createMediaElementSource(audioRef.current!)\n\t\t\tconst analyser = audioContext.createAnalyser()\n\t\t\tsrc.connect(analyser)\n\t\t\tanalyser.connect(audioContext.destination)\n\t\t\tanalyser.fftSize = 256\n\t\t\tanalyserRef.current = analyser\n\t\t}\n\n\t\taudioRef.current!.volume = volumeRef.current\n\n\t\tconst bufferLength = analyserRef.current!.frequencyBinCount\n\t\tconst dataArray = new Uint8Array(bufferLength)\n\n\t\tcanvasRef.current!.width = window.innerWidth\n\t\tcanvasRef.current!.height = window.innerHeight\n\t\tconst ctx = canvasRef.current!.getContext('2d')!\n\n\t\trenderFrame(ctx, dataArray)\n\t}\n\n\t/**\n\t * フレーム毎にcanvasに描画する\n\t * @param ctx\n\t * @param dataArray\n\t */\n\tfunction renderFrame(ctx: CanvasRenderingContext2D, dataArray: Uint8Array) {\n\t\tconst WIDTH = ctx.canvas.width\n\t\tconst HEIGHT = ctx.canvas.height\n\t\tconst dataLength = dataArray.length\n\t\t// const barWidth = (WIDTH / dataLength) * 2.5\n\t\tconst barWidth = WIDTH / dataLength\n\t\tlet x = 0\n\n\t\tanalyserRef.current!.getByteFrequencyData(dataArray)\n\n\t\tctx.fillStyle = '#1e1e1e'\n\t\tctx.fillRect(0, 0, WIDTH, HEIGHT)\n\n\t\tfor (let i = 0; i < dataLength; i++) {\n\t\t\tconst barHeight = dataArray[i]\n\n\t\t\tconst r = barHeight + 25 * (i / dataLength)\n\t\t\tconst g = 250 * (i / dataLength)\n\t\t\tconst b = 50\n\n\t\t\tctx.fillStyle = 'rgb(' + r + ',' + g + ',' + b + ')'\n\t\t\tctx.fillRect(x, HEIGHT / 2, barWidth, -barHeight)\n\t\t\tctx.fillRect(x, HEIGHT / 2, barWidth, barHeight)\n\n\t\t\tx += barWidth + 1\n\t\t}\n\n\t\tanimeIdRef.current = requestAnimationFrame(() => renderFrame(ctx, dataArray))\n\t}\n\n\tuseEffect(() => {\n\t\treturn () => {\n\t\t\tif (animeIdRef.current) {\n\t\t\t\tcancelAnimationFrame(animeIdRef.current)\n\t\t\t}\n\t\t}\n\t}, [])\n\n\treturn (\n\t\t<div className={styles.container}>\n\t\t\t<canvas ref={canvasRef} className={styles.canvas} />\n\t\t\t<audio\n\t\t\t\tref={audioRef}\n\t\t\t\tclassName={styles.player}\n\t\t\t\tcontrols\n\t\t\t\tloop\n\t\t\t\tsrc=\"./assets/たぬきちの冒険.mp3\"\n\t\t\t\tonPlay={playHandler}\n\t\t\t\tonVolumeChange={() => (volumeRef.current = audioRef.current!.volume)}\n\t\t\t/>\n\t\t</div>\n\t)\n}\n\n// ==============================================\n// styles\n\nconst styles = {\n\tcontainer: css`\n\t\tposition: relative;\n\t\twidth: 100vw;\n\t\theight: 100vh;\n\t\tdisplay: flex;\n\t\tjustify-content: center;\n\t\talign-items: center;\n\t`,\n\tcanvas: css`\n\t\twidth: 100%;\n\t\theight: 100%;\n\t`,\n\tplayer: css`\n\t\tposition: absolute;\n\t\tbottom: 20px;\n\t`\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import './index.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}